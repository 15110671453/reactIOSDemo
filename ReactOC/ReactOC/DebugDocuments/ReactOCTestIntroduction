第四  react native 程序 集成后
、运行前 先启动需要的服务器 这里是开发测试服务器使用方法
具体正式项目时 需要的服务器该如何设置 后续学习介绍
bogon:ReactOC admindyn$
注意这里是 在服务器根目录下相对的存放JS文件的真正目录  是相对路径
JS_DIR=pwd/ReactComponent
bogon:ReactOC admindyn$ echo $JS_DIR
pwd/ReactComponent
bogon:ReactOC admindyn$ cd Pods/React/
bogon:React admindyn$ npm run start --root $JS_DIR

> react-native@0.11.0 start /Users/admindyn/Desktop/工作/集分宝项目工作目录/ReactOC/Pods/React
> ./packager/packager.sh || true "pwd/ReactComponent"

┌────────────────────────────────────────────────────────────────────────────┐
│  Running packager on port 8081.                                            │
│                                                                            │
│  Keep this packager running while developing on any JS projects. Feel      │
│  free to close this tab and run your own packager instance if you          │
│  prefer.                                                                   │
│                                                                            │
│  https://github.com/facebook/react-native                                  │
│                                                                            │
└────────────────────────────────────────────────────────────────────────────┘
Looking for JS files in

注意 这里是192.168.3.98 对应的服务器根目录
/Users/admindyn/Desktop/工作/集分宝项目工作目录/ReactOC


React packager ready.

[17:17:23] <START> Building Dependency Graph
[17:17:23] <START> Crawling File System
[17:17:28] <END>   Crawling File System (4455ms)
[17:17:28] <START> Building in-memory fs for JavaScript
[17:17:28] <END>   Building in-memory fs for JavaScript (565ms)
[17:17:28] <START> Building in-memory fs for Assets
[17:17:29] <END>   Building in-memory fs for Assets (562ms)
[17:17:29] <START> Building Haste Map
[17:17:29] <START> Building (deprecated) Asset Map
[17:17:29] <END>   Building (deprecated) Asset Map (228ms)
[17:17:30] <END>   Building Haste Map (1247ms)
[17:17:30] <END>   Building Dependency Graph (6830ms) 




注册页面 这里 需要注意AppRegistry.registerComponent
中第一个页面中根父级组件名是不是应该和项目工程文件名一致

'use strict';
let React = require('react-native');
let {
AppRegistry,StyleSheet,Text,View,TextInput
} = React;

let Dimensions = require('Dimensions');
let totalWidth = Dimensions.get('window').width;
let leftStartPoint = totalWidth *  0.1;
let componentWidth = totalWidth * 0.8;
let ReactOC = React.createClass({
getInitialState: function() {
return {
inputedNum:'',
inputedPW:'',
};
},
updateNum: function(newText) {
this.setState((state) => {
for (var aName in oldState) {
console.log(aName);
console.log(oldState[aName]);

}
return {
inputedNum: newText,
aBrandnewStateVariable: 'I am a new variable',
};
},this.changeNumDone);
},
changeNumDone:function() {
console.log('React Native has changed inputed Num');
},
updatePW: function (newText) {
this.setState(() => {
return {
updatePW: newText,
};
});
},
render: function () {
return (

<View style = {styles.container}>
<TextInput style={styles.numberInputStyle}
placeholder={'请输入手机号吗'}/>
<Text style ={styles.textPromptStyle}> 您输入的手机号</Text>
<TextInput style={styles.passwordInputStyle} placeholder={'请输入密码'}
password={true}/>
<Text style={styles.bigTextPrompt}>
确定
</Text>

</View>
);
},
});

let styles = StyleSheet.create({
container: {
flex:1,
backgroundColor:'white',
},
numberInputStyle: {
top: 20,
left:leftStartPoint,
width:componentWidth,
backgroundColor: 'gray',
fontSize: 20,
},
textPromptStyle:{
top:30,
left: leftStartPoint,
width: componentWidth,
fontSize: 20,
},
passwordInputStyle:{
top: 50,
left: leftStartPoint,
width: componentWidth,
backgroundColor: 'gray',
fontSize: 20,
},
bigTextPrompt:{
top: 70,
left: leftStartPoint,
width: componentWidth,
backgroundColor: 'gray',
color:'white',
textAlign:'center',
fontSize: 60,
}
});
AppRegistry.registerComponent('ReactOC', () => ReactOC);
